####
# trackId <- 24789661
# divairportIATAFAA <- "STN" # London Stansted Airport
# DEFAULT_ZOOM <- 5
# diversioncheck <- FALSE
# showdiversionairport <- TRUE
# nolegend <- TRUE
print(paste("Examining flight track no. ", trackId))
#    data <- read.csv2(file=paste(HOME_DIR,"/db-csv-samples/",trackId,"-flightData.csv", sep=""), sep=";")#dbGetQuery(frDb, paste("SELECT F.* FROM FlightEvents F WHERE F.trackId =", trackId, " AND F.origin IS NOT NULL AND F.destination IS NOT NULL ORDER BY F.eventTimestamp", sep=" "))
#    bgEnData <- read.csv2(file=paste(HOME_DIR,"/db-csv-samples/",trackId,"-bgEnData.csv", sep=""), sep=";")#dbGetQuery(frDb, paste("SELECT F.trackId, OrigA.latitude AS origAirpoLat, OrigA.longitude AS origAirpoLon, OrigA.city AS oriCity, OrigA.name AS oriName, DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM FlightEvents F, Airports OrigA, Airports DestinA WHERE F.origin = OrigA.IATAFAA AND F.destination = DestinA.IATAFAA AND F.trackId =", trackId, "GROUP BY trackId"))
#    unexpectedDestination <- read.csv2(file=paste(HOME_DIR,"/db-csv-samples/",trackId,"-diversionAirport.csv", sep=""), sep=";")#dbGetQuery(frDb, paste("SELECT DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM Airports DestinA WHERE DestinA.IATAFAA='MUC'"))
#    data$datetime <- as.POSIXct(as.numeric(as.character(data$eventTimestamp)), origin="1970-01-01")
#    data$speed <- as.double(as.character(data$speed))
#    data$latitude <- as.numeric(as.character(data$latitude))
#    data$longitude <- as.double(as.character(data$longitude))
#    data$altitude <- as.double(as.character(data$altitude))
#    bgEnData$origAirpoLat <- as.double(as.character(bgEnData$origAirpoLat))
#    bgEnData$origAirpoLon <- as.double(as.character(bgEnData$origAirpoLon))
#    bgEnData$destinAirpoLat <- as.double(as.character(bgEnData$destinAirpoLat))
#    bgEnData$destinAirpoLon <- as.double(as.character(bgEnData$destinAirpoLon))
#    unexpectedDestination$destinAirpoLat <- as.double(as.character(unexpectedDestination$destinAirpoLat))
#    unexpectedDestination$destinAirpoLon <- as.double(as.character(unexpectedDestination$destinAirpoLon))
data <- dbGetQuery(frDb, paste("SELECT F.* FROM FlightEvents F WHERE F.trackId =", trackId, " AND F.origin IS NOT NULL AND F.destination IS NOT NULL ORDER BY F.eventTimestamp", sep=" "))
bgEnData <- dbGetQuery(frDb, paste("SELECT F.trackId, OrigA.latitude AS origAirpoLat, OrigA.longitude AS origAirpoLon, OrigA.city AS oriCity, OrigA.name AS oriName, DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM FlightEvents F, Airports OrigA, Airports DestinA WHERE F.origin = OrigA.IATAFAA AND F.destination = DestinA.IATAFAA AND F.trackId =", trackId, "GROUP BY trackId"))
data$datetime <- as.POSIXct(data$eventTimestamp, origin="1970-01-01")
if (showdiversionairport) {
unexpectedDestination <- dbGetQuery(frDb, paste("SELECT DISTINCT DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM Airports DestinA WHERE DestinA.IATAFAA='",divairportIATAFAA,"'", sep = ""))
unexpectedDestination
}
if (diversioncheck) {
checkedPoints <- read.csv2(file=paste(HOME_DIR,"/detectionlogfiles/",trackId,"-4x3-anomaliesDetected.csv", sep=""), header=TRUE, sep=";",quote='""', comment.char="#")
checkedPoints$datetime <- gsub(x = checkedPoints$predictionDateTime, pattern = "([+-])([0-9][0-9]):([0-9][0-9])", replacement =  "\\1\\2\\3")
checkedPoints$datetime <- as.POSIXct(checkedPoints$datetime,format='%Y-%m-%d %H:%M:%S%z')
data <- merge(data, checkedPoints[,c("datetime","anomaly","distLeft","distGain","dspeed","dalt","firstAlert")], by.x="datetime", by.y="datetime", all.x = TRUE, sort = TRUE, suffixes = c(".x",".y"))
}
#    print("data")
#    print(data)
#    print("checkedPoints")
#    print(checkedPoints)
# data[data$datetime %in% checkedPoints$datetime,])
#    print("data")
if (!(length(data) > 0 & length(bgEnData) > 0)) {
quit()
}
quantiles.speed <- quantile(data$speed)
if (max(data$speed) + min(data$speed) > 0) {
quantiles.speed.scaled <- quantiles.speed / (max(data$speed) - min(data$speed))
quantiles.speed.scaled[1] <- 0
} else {
quantiles.speed.scaled <- quantiles.speed
}
separationIndex <- which(tail(data$eventTimestamp,-1) > head(data$eventTimestamp,-1) + 30*60)
if (is.integer(separationIndex) & length(separationIndex) > 0) {
#        data <- data[1:separationIndex[1],]
print("Warning! Events are missing for 30 minutes in flight data at: ")
print(data[separationIndex[1],])
}
data.minlat <- min(c( data$latitude, bgEnData$origAirpoLat, bgEnData$destinAirpoLat ))
data.maxlat <- max(c( data$latitude, bgEnData$origAirpoLat, bgEnData$destinAirpoLat ))
data.minlon <- min(c( data$longitude, bgEnData$origAirpoLon, bgEnData$destinAirpoLon ))
data.maxlon <- max(c( data$longitude, bgEnData$origAirpoLon, bgEnData$destinAirpoLon ))
#    left/bottom/right/top bounding box
boundingbox <- c(data.minlon, data.minlat, data.maxlon, data.maxlat)
## To find which row has some NA in some column
# print(data[unique (unlist (lapply (data, function (x) which (is.na (x))))),])
custo_map <- get_map(location = boundingbox, zoom=DEFAULT_ZOOM, color="bw", crop = TRUE)
#    custo_map <- openmap(c(lat = data.maxlat + 5, lon = data.minlon - 5), c(lat = data.minlat - 5, lon = data.maxlon + 5), type=maptype)
#    custo_map <- openmap(c(lat = data.maxlat + 5, lon = data.minlon - 5), c(lat = data.minlat - 5, lon = data.maxlon + 5), type=maptype)
#    custo_map <- openmap(c(lat = 198, lon = -4), c(lat = -4, lon = 17), minNumTiles=9, type=maptype)
#    custo_map <- openproj(custo_map)
pdf(paste(OUT_FOLDER, "/", trackId, "-nu-map.pdf", sep=""))
#    p <- ggmap(euro_map) +
p <- ggmap(custo_map) +
geom_path(data = data, aes(x = longitude, y = latitude), size=4, colour="white", alpha=0.75) +
geom_point(data = data, aes(x = longitude, y = latitude, colour = speed)) +
geom_path(data = data, aes(x = longitude, y = latitude), linetype="dashed")
if (showdiversionairport) {
p <- p + geom_point(data = unexpectedDestination, aes(x = destinAirpoLon, y = destinAirpoLat, shape="Diversion"), size=8)
#        geom_text(data = unexpectedDestination, aes(x = destinAirpoLon, y = destinAirpoLat + 1, label=paste(destiCity, "\n", "(", destiName, ")", sep="")), hjust=0.5, vjust=0, size=3, alpha=0.85, fontface="bold") +
}
p <- p +
geom_point(data = bgEnData, aes(x = destinAirpoLon, y = destinAirpoLat, shape="Destination"), size=8) +
#        geom_text(data = bgEnData, aes(x = destinAirpoLon, y = destinAirpoLat + 0.75, label=paste(destiCity, "  (", destiName, ")", sep="")), hjust=0, vjust=0, size=3, alpha=0.85, fontface="bold") +
geom_point(data = bgEnData, aes(x = origAirpoLon, y = origAirpoLat, shape="Origin"), size=8)
#        geom_text(data = bgEnData, aes(x = origAirpoLon - 0.5, y = origAirpoLat, label=paste(oriCity,"  ", "(", oriName, ")    ", sep="")), hjust=1, vjust=0.5, size=3, alpha=0.85, fontface="bold") +
if (diversioncheck) {
p <- p +
geom_text(data = data[!is.na(data$anomaly) & (data$firstAlert == 'Alert!'),], aes(x = longitude, y = latitude, label="    Diversion detected  "), hjust=0, vjust=0.5, size=4, alpha=0.85, angle=45, fontface="bold") +
geom_point(data = data[!is.na(data$anomaly) & (data$firstAlert == 'Alert!'),], aes(x = longitude, y = latitude, size = altitude * 1.5), size=3, alpha = 0.5) +
geom_point(data = data[!is.na(data$anomaly) & (data$firstAlert == 'Alert!'),], aes(x = longitude, y = latitude, size = altitude * 1.5), size=3, shape = 1)
}
p <- p +
scale_x_continuous(limits = c(data.minlon -1, data.maxlon +1)) +
scale_y_continuous(limits = c(data.minlat -1, data.maxlat +1)) +
#        labs(list(title = paste("Flight #", trackId, sep=""), colour = "Speed [mph]", size = "Altitude [feet]", shape = "Airport", x = "Longitude [deg]", y = "Latitude [deg]")) +
# Without title
labs(list(title = element_blank(), shape = "Airport", colour = "Speed [mph]", x = "Longitude [deg]", y = "Latitude [deg]")) +
#        guides(shape = guide_legend(override.aes = list(alpha = 1.0, colour="black"))) +
scale_shape_manual(breaks = airshapetypes$types, values=airshapetypes$shapes)
if (max(data$speed) + min(data$speed) > 0) {
p <- p +
scale_colour_gradientn(limits=c(min(data$speed), max(data$speed)), values=as.double(quantiles.speed.scaled), colours = speedcolours) +
scale_fill_grey()
}
if (nolegend) {
p <- p + theme(legend.position='none')
}
print(p)
dev.off()
#}
data <- read.csv2(
file="../etc/alerts-of-bestfscorers-on-noks.csv",
sep=";")
data$filenameNoExtension <- gsub('.xml', '', data$filename)
data$flightArea <- ifelse(grepl(pattern ="^[0-9][0-9]*$", x = data$filenameNoExtension), "EU", "US")
data$realFlightId <- ifelse(data$flightArea == "EU", data$filenameNoExtension, data$flightId)
data[c("filename","flightId","realFlightId","flightArea")]
data$firstEventDateTime <- as.POSIXct(as.character(data$firstEventDateTime))
data$lastEventDateTime <- as.POSIXct(as.character(data$lastEventDateTime))
data$predictionDateTime <- as.POSIXct(as.character(data$predictionDateTime))
data$timeSaved <- as.numeric(data$lastEventDateTime - data$predictionDateTime)
data$timeSavedHhMmSs <-    sprintf("%s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(data$timeSaved < 0, "-", ""), # sign
abs(data$timeSaved) %/% 86400,  # days
abs(data$timeSaved) %% 86400 %/% 3600,  # hours
abs(data$timeSaved) %% 3600 %/% 60,  # minutes
abs(data$timeSaved) %% 60 %/% 1) # seconds
# data[1:20,c("firstEventDateTime","lastEventDateTime","predictionDateTime","timeSavedHhMmSs","timeSaved")]
print("Time saved w.r.t. the actual landing")
meanTimeSaved <- mean(data$timeSaved)
medianTimeSaved <- median(data$timeSaved)
minTimeSaved <- min(data$timeSaved)
maxTimeSaved <- max(data$timeSaved)
sprintf("Average: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(meanTimeSaved < 0, "-", ""), # sign
abs(meanTimeSaved) %/% 86400,  # days
abs(meanTimeSaved) %% 86400 %/% 3600,  # hours
abs(meanTimeSaved) %% 3600 %/% 60,  # minutes
abs(meanTimeSaved) %% 60 %/% 1) # seconds
sprintf("Median: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(medianTimeSaved < 0, "-", ""), # sign
abs(medianTimeSaved) %/% 86400,  # days
abs(medianTimeSaved) %% 86400 %/% 3600,  # hours
abs(medianTimeSaved) %% 3600 %/% 60,  # minutes
abs(medianTimeSaved) %% 60 %/% 1) # seconds
sprintf("Minimum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(minTimeSaved < 0, "-", ""), # sign
abs(minTimeSaved) %/% 86400,  # days
abs(minTimeSaved) %% 86400 %/% 3600,  # hours
abs(minTimeSaved) %% 3600 %/% 60,  # minutes
abs(minTimeSaved) %% 60 %/% 1) # seconds
sprintf("Maximum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(maxTimeSaved < 0, "-", ""), # sign
abs(maxTimeSaved) %/% 86400,  # days
abs(maxTimeSaved) %% 86400 %/% 3600,  # hours
abs(maxTimeSaved) %% 3600 %/% 60,  # minutes
abs(maxTimeSaved) %% 60 %/% 1) # seconds
# print("Alerts")
# data[c("filename","flightId","realFlightId","departureCode","arrivalCode","predictionDateTime","timeSaved","timeSavedHhMmSs")]
# print("Predicted diversions' filenames")
# data$filename
# print("Predicted diversions' flightIds")
# data$flightId
flightCodesForAlertsEUFile <- "../flights/flightCodes-forAlerts-EU.csv"
# print("Queries for diverted flightIds")
# paste("SELECT trackId, flightNumber, origin, destination FROM FlightEvents WHERE trackId in ('", paste( data[data$flightArea == "EU", c("realFlightId")], collapse="','" ), "') GROUP BY trackId, flightNumber",
##      " INTO OUTFILE '",
##      "../flights/flightCodes-forAlerts-EU.csv",
##      "' ",
##      "FIELDS TERMINATED BY ',' ",
##      "ENCLOSED BY '' ",
##      "LINES TERMINATED BY '\n'",
#      ";",
#      sep="")
plannedFlightTimesUS <- read.csv2(
file="../flights/plannedfFlightTimes-forAlerts-US.csv",
sep=","
)
plannedFlightTimesUS$flightTime <- as.difftime(as.character(plannedFlightTimesUS$flightTime), format="%H:%M:%S", units = "mins")
plannedFlightTimesEU <- read.csv2(
file="../flights/plannedfFlightTimes-forAlerts-EU.csv",
sep=","
)
plannedFlightTimesEU$flightTime <- as.difftime(as.character(plannedFlightTimesEU$flightTime), format="%H:%M:%S", units = "mins")
plannedFlightTimesEU$stopFlightTime <- as.difftime(as.character(plannedFlightTimesEU$stopFlightTime), format="%H:%M:%S", units = "mins")
dataEU <- data[data$flightArea == "EU",]
dataUS <- data[data$flightArea == "US",]
dataEU <- merge(x = dataEU, y = plannedFlightTimesEU[c("trackId","flightTime")], by.x = "realFlightId", by.y = "trackId", all.x = TRUE)
dataUS <- merge(x = dataUS, y = plannedFlightTimesUS[c("filenameNoXml","flightTime")], by.x = "filenameNoExtension", by.y = "filenameNoXml", all.x = TRUE)
data <- rbind(dataEU,dataUS)
data$timeSavedWrtETA <- data$firstEventDateTime + data$flightTime - data$predictionDateTime
meanTimeSavedWrtETA <- as.numeric(mean(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
medianTimeSavedWrtETA <- as.numeric(median(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
minTimeSavedWrtETA <- as.numeric(min(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
maxTimeSavedWrtETA <- as.numeric(max(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
print("Time saved w.r.t. the expected landing")
sprintf("Average: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(meanTimeSavedWrtETA < 0, "-", ""), # sign
abs(meanTimeSavedWrtETA) %/% 86400,  # days
abs(meanTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(meanTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(meanTimeSavedWrtETA) %% 60 %/% 1) # seconds
sprintf("Median: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(medianTimeSavedWrtETA < 0, "-", ""), # sign
abs(medianTimeSavedWrtETA) %/% 86400,  # days
abs(medianTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(medianTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(medianTimeSavedWrtETA) %% 60 %/% 1) # seconds
sprintf("Minimum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(minTimeSavedWrtETA < 0, "-", ""), # sign
abs(minTimeSavedWrtETA) %/% 86400,  # days
abs(minTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(minTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(minTimeSavedWrtETA) %% 60 %/% 1) # seconds
sprintf("Maximum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(maxTimeSavedWrtETA < 0, "-", ""), # sign
abs(maxTimeSavedWrtETA) %/% 86400,  # days
abs(maxTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(maxTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(maxTimeSavedWrtETA) %% 60 %/% 1) # seconds
# data[data$filenameNoExtension == "24936159",]
data[order(data$flightTime-data$timeSavedWrtETA),c("realFlightId","filename","departureCode","arrivalCode","flightTime","timeSavedWrtETA","timeSavedHhMmSs")]
# write.csv2(data[order(data$flightTime-data$timeSavedWrtETA),c("realFlightId","filename","departureCode","arrivalCode","flightTime","timeSavedWrtETA","timeSavedHhMmSs")])
names(data)
setwd("~/Code/DiversionDetector/proc")
data <- read.csv2(
file="../etc/alerts-of-bestfscorers-on-noks.csv",
sep=";")
data$filenameNoExtension <- gsub('.xml', '', data$filename)
data$flightArea <- ifelse(grepl(pattern ="^[0-9][0-9]*$", x = data$filenameNoExtension), "EU", "US")
data$realFlightId <- ifelse(data$flightArea == "EU", data$filenameNoExtension, data$flightId)
data[c("filename","flightId","realFlightId","flightArea")]
data$firstEventDateTime <- as.POSIXct(as.character(data$firstEventDateTime))
data$lastEventDateTime <- as.POSIXct(as.character(data$lastEventDateTime))
data$predictionDateTime <- as.POSIXct(as.character(data$predictionDateTime))
data$timeSaved <- as.numeric(data$lastEventDateTime - data$predictionDateTime)
data$timeSavedHhMmSs <-    sprintf("%s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(data$timeSaved < 0, "-", ""), # sign
abs(data$timeSaved) %/% 86400,  # days
abs(data$timeSaved) %% 86400 %/% 3600,  # hours
abs(data$timeSaved) %% 3600 %/% 60,  # minutes
abs(data$timeSaved) %% 60 %/% 1) # seconds
# data[1:20,c("firstEventDateTime","lastEventDateTime","predictionDateTime","timeSavedHhMmSs","timeSaved")]
print("Time saved w.r.t. the actual landing")
meanTimeSaved <- mean(data$timeSaved)
medianTimeSaved <- median(data$timeSaved)
minTimeSaved <- min(data$timeSaved)
maxTimeSaved <- max(data$timeSaved)
sprintf("Average: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(meanTimeSaved < 0, "-", ""), # sign
abs(meanTimeSaved) %/% 86400,  # days
abs(meanTimeSaved) %% 86400 %/% 3600,  # hours
abs(meanTimeSaved) %% 3600 %/% 60,  # minutes
abs(meanTimeSaved) %% 60 %/% 1) # seconds
sprintf("Median: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(medianTimeSaved < 0, "-", ""), # sign
abs(medianTimeSaved) %/% 86400,  # days
abs(medianTimeSaved) %% 86400 %/% 3600,  # hours
abs(medianTimeSaved) %% 3600 %/% 60,  # minutes
abs(medianTimeSaved) %% 60 %/% 1) # seconds
sprintf("Minimum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(minTimeSaved < 0, "-", ""), # sign
abs(minTimeSaved) %/% 86400,  # days
abs(minTimeSaved) %% 86400 %/% 3600,  # hours
abs(minTimeSaved) %% 3600 %/% 60,  # minutes
abs(minTimeSaved) %% 60 %/% 1) # seconds
sprintf("Maximum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(maxTimeSaved < 0, "-", ""), # sign
abs(maxTimeSaved) %/% 86400,  # days
abs(maxTimeSaved) %% 86400 %/% 3600,  # hours
abs(maxTimeSaved) %% 3600 %/% 60,  # minutes
abs(maxTimeSaved) %% 60 %/% 1) # seconds
# print("Alerts")
# data[c("filename","flightId","realFlightId","departureCode","arrivalCode","predictionDateTime","timeSaved","timeSavedHhMmSs")]
# print("Predicted diversions' filenames")
# data$filename
# print("Predicted diversions' flightIds")
# data$flightId
flightCodesForAlertsEUFile <- "../flights/flightCodes-forAlerts-EU.csv"
# print("Queries for diverted flightIds")
# paste("SELECT trackId, flightNumber, origin, destination FROM FlightEvents WHERE trackId in ('", paste( data[data$flightArea == "EU", c("realFlightId")], collapse="','" ), "') GROUP BY trackId, flightNumber",
##      " INTO OUTFILE '",
##      "../flights/flightCodes-forAlerts-EU.csv",
##      "' ",
##      "FIELDS TERMINATED BY ',' ",
##      "ENCLOSED BY '' ",
##      "LINES TERMINATED BY '\n'",
#      ";",
#      sep="")
plannedFlightTimesUS <- read.csv2(
file="../flights/plannedfFlightTimes-forAlerts-US.csv",
sep=","
)
plannedFlightTimesUS$flightTime <- as.difftime(as.character(plannedFlightTimesUS$flightTime), format="%H:%M:%S", units = "mins")
plannedFlightTimesEU <- read.csv2(
file="../flights/plannedfFlightTimes-forAlerts-EU.csv",
sep=","
)
plannedFlightTimesEU$flightTime <- as.difftime(as.character(plannedFlightTimesEU$flightTime), format="%H:%M:%S", units = "mins")
plannedFlightTimesEU$stopFlightTime <- as.difftime(as.character(plannedFlightTimesEU$stopFlightTime), format="%H:%M:%S", units = "mins")
dataEU <- data[data$flightArea == "EU",]
dataUS <- data[data$flightArea == "US",]
dataEU <- merge(x = dataEU, y = plannedFlightTimesEU[c("trackId","flightTime")], by.x = "realFlightId", by.y = "trackId", all.x = TRUE)
dataUS <- merge(x = dataUS, y = plannedFlightTimesUS[c("filenameNoXml","flightTime")], by.x = "filenameNoExtension", by.y = "filenameNoXml", all.x = TRUE)
data <- rbind(dataEU,dataUS)
data$timeSavedWrtETA <- data$firstEventDateTime + data$flightTime - data$predictionDateTime
meanTimeSavedWrtETA <- as.numeric(mean(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
medianTimeSavedWrtETA <- as.numeric(median(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
minTimeSavedWrtETA <- as.numeric(min(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
maxTimeSavedWrtETA <- as.numeric(max(data$timeSavedWrtETA[!is.na(data$timeSavedWrtETA)])) * 60
print("Time saved w.r.t. the expected landing")
sprintf("Average: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(meanTimeSavedWrtETA < 0, "-", ""), # sign
abs(meanTimeSavedWrtETA) %/% 86400,  # days
abs(meanTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(meanTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(meanTimeSavedWrtETA) %% 60 %/% 1) # seconds
sprintf("Median: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(medianTimeSavedWrtETA < 0, "-", ""), # sign
abs(medianTimeSavedWrtETA) %/% 86400,  # days
abs(medianTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(medianTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(medianTimeSavedWrtETA) %% 60 %/% 1) # seconds
sprintf("Minimum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(minTimeSavedWrtETA < 0, "-", ""), # sign
abs(minTimeSavedWrtETA) %/% 86400,  # days
abs(minTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(minTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(minTimeSavedWrtETA) %% 60 %/% 1) # seconds
sprintf("Maximum: %s%02d:%02d:%02d:%02d", # "%s%02d:%02d:%02d",
ifelse(maxTimeSavedWrtETA < 0, "-", ""), # sign
abs(maxTimeSavedWrtETA) %/% 86400,  # days
abs(maxTimeSavedWrtETA) %% 86400 %/% 3600,  # hours
abs(maxTimeSavedWrtETA) %% 3600 %/% 60,  # minutes
abs(maxTimeSavedWrtETA) %% 60 %/% 1) # seconds
# data[data$filenameNoExtension == "24936159",]
data[order(data$flightTime-data$timeSavedWrtETA),c("realFlightId","filename","departureCode","arrivalCode","flightTime","timeSavedWrtETA","timeSavedHhMmSs")]
# write.csv2(data[order(data$flightTime-data$timeSavedWrtETA),c("realFlightId","filename","departureCode","arrivalCode","flightTime","timeSavedWrtETA","timeSavedHhMmSs")])
names(data)
data[order(data$flightTime-data$timeSavedWrtETA),c("realFlightId","filename","departureCode","arrivalCode","firstEventDateTime","lastEventDateTime","flightTime","timeSavedWrtETA","timeSavedHhMmSs")]
data[order(data$flightTime-data$timeSavedWrtETA),c("realFlightId","filename","departureCode","arrivalCode","firstEventDateTime","lastEventDateTime","flightTime","predictionDateTime","timeSavedWrtETA","timeSavedHhMmSs")]
# sudo apt-get install libproj-dev libgdal1-dev
# sudo R CMD javareconf
# sudo R : install.packages("OpenStreetMap")
library(ggplot2)
library(ggmap)
library(RMySQL)
library(plyr)
# require(OpenStreetMap)
HOME_DIR <- "/home/claudio/University/Pubs/flightmonitoring/code-and-data-repo/DiversionDetector/flightpicsmaking"
OUT_FOLDER <- paste(HOME_DIR, "gfx", sep = "/")
printer_friendly <- TRUE
if (showdiversionairport) {
airshapes <- c("Destination", "Diversion", "Origin")
airshapetypes <- data.frame( types = airshapes, shapes = c(12,8,14) )
} else {
airshapes <- c("Destination", "Origin")
airshapetypes <- data.frame( types = airshapes, shapes = c(12,14) )
}
speedcolours <- c("white","grey90","grey80","grey50","black")
options(width=240)
frDb <- dbConnect(MySQL(), user='fr24', password='fr24', dbname='flightradar24', host='get-service.ai.wu.ac.at')
# data <- dbReadTable(frDb, "FlightsWithStartAndEnd")
# for (trackId in 25011286) {
# for (trackId in trackIds$trackId) {
# for (trackId in 24845690) {
# for (trackId in trackIds) {
#### Not diverted (true negatives)
####
# trackId <- 24888970 # MUC to LHR
# divairportIATAFAA <- NONE
# DEFAULT_ZOOM <- 5
# diversioncheck <- FALSE
# showdiversionairport <- TRUE
# nolegend <- TRUE
#### Diverted and detected as such (true positives)
####
# trackId <- 24936159 # MUC to LHR
# divairportIATAFAA <- "MUC" # Munich Airport
# DEFAULT_ZOOM <- 5
# diversioncheck <- FALSE
# showdiversionairport <- TRUE
# nolegend <- TRUE
# trackId <- 24643263
# divairportIATAFAA <- "SVG" # Stavanger, Sola Airport
# DEFAULT_ZOOM <- 4
# diversioncheck <- TRUE
# showdiversionairport <- TRUE
# nolegend <- FALSE
trackId <- 24871421
divairportIATAFAA <- "SVG" # Stavanger, Sola Airport
DEFAULT_ZOOM <- 4
diversioncheck <- TRUE
# showdiversionairport <- TRUE
nolegend <- FALSE
# trackId <- 24939815
# divairportIATAFAA <- "NCE" # Nice Côte d'Azur International Airport
# DEFAULT_ZOOM <- 5
# diversioncheck <- FALSE
# showdiversionairport <- TRUE
# nolegend <- TRUE
#### Diverted but not detected as such (false negatives)
####
# trackId <- 24789661
# divairportIATAFAA <- "STN" # London Stansted Airport
# DEFAULT_ZOOM <- 5
# diversioncheck <- FALSE
# showdiversionairport <- TRUE
# nolegend <- TRUE
print(paste("Examining flight track no. ", trackId))
#    data <- read.csv2(file=paste(HOME_DIR,"/db-csv-samples/",trackId,"-flightData.csv", sep=""), sep=";")#dbGetQuery(frDb, paste("SELECT F.* FROM FlightEvents F WHERE F.trackId =", trackId, " AND F.origin IS NOT NULL AND F.destination IS NOT NULL ORDER BY F.eventTimestamp", sep=" "))
#    bgEnData <- read.csv2(file=paste(HOME_DIR,"/db-csv-samples/",trackId,"-bgEnData.csv", sep=""), sep=";")#dbGetQuery(frDb, paste("SELECT F.trackId, OrigA.latitude AS origAirpoLat, OrigA.longitude AS origAirpoLon, OrigA.city AS oriCity, OrigA.name AS oriName, DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM FlightEvents F, Airports OrigA, Airports DestinA WHERE F.origin = OrigA.IATAFAA AND F.destination = DestinA.IATAFAA AND F.trackId =", trackId, "GROUP BY trackId"))
#    unexpectedDestination <- read.csv2(file=paste(HOME_DIR,"/db-csv-samples/",trackId,"-diversionAirport.csv", sep=""), sep=";")#dbGetQuery(frDb, paste("SELECT DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM Airports DestinA WHERE DestinA.IATAFAA='MUC'"))
#    data$datetime <- as.POSIXct(as.numeric(as.character(data$eventTimestamp)), origin="1970-01-01")
#    data$speed <- as.double(as.character(data$speed))
#    data$latitude <- as.numeric(as.character(data$latitude))
#    data$longitude <- as.double(as.character(data$longitude))
#    data$altitude <- as.double(as.character(data$altitude))
#    bgEnData$origAirpoLat <- as.double(as.character(bgEnData$origAirpoLat))
#    bgEnData$origAirpoLon <- as.double(as.character(bgEnData$origAirpoLon))
#    bgEnData$destinAirpoLat <- as.double(as.character(bgEnData$destinAirpoLat))
#    bgEnData$destinAirpoLon <- as.double(as.character(bgEnData$destinAirpoLon))
#    unexpectedDestination$destinAirpoLat <- as.double(as.character(unexpectedDestination$destinAirpoLat))
#    unexpectedDestination$destinAirpoLon <- as.double(as.character(unexpectedDestination$destinAirpoLon))
data <- dbGetQuery(frDb, paste("SELECT F.* FROM FlightEvents F WHERE F.trackId =", trackId, " AND F.origin IS NOT NULL AND F.destination IS NOT NULL ORDER BY F.eventTimestamp", sep=" "))
bgEnData <- dbGetQuery(frDb, paste("SELECT F.trackId, OrigA.latitude AS origAirpoLat, OrigA.longitude AS origAirpoLon, OrigA.city AS oriCity, OrigA.name AS oriName, DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM FlightEvents F, Airports OrigA, Airports DestinA WHERE F.origin = OrigA.IATAFAA AND F.destination = DestinA.IATAFAA AND F.trackId =", trackId, "GROUP BY trackId"))
data$datetime <- as.POSIXct(data$eventTimestamp, origin="1970-01-01")
if (showdiversionairport) {
unexpectedDestination <- dbGetQuery(frDb, paste("SELECT DISTINCT DestinA.latitude AS destinAirpoLat, DestinA.longitude AS destinAirpoLon, DestinA.city AS destiCity, DestinA.name AS destiName FROM Airports DestinA WHERE DestinA.IATAFAA='",divairportIATAFAA,"'", sep = ""))
unexpectedDestination
}
if (diversioncheck) {
checkedPoints <- read.csv2(file=paste(HOME_DIR,"/detectionlogfiles/",trackId,"-4x3-anomaliesDetected.csv", sep=""), header=TRUE, sep=";",quote='""', comment.char="#")
checkedPoints$datetime <- gsub(x = checkedPoints$predictionDateTime, pattern = "([+-])([0-9][0-9]):([0-9][0-9])", replacement =  "\\1\\2\\3")
checkedPoints$datetime <- as.POSIXct(checkedPoints$datetime,format='%Y-%m-%d %H:%M:%S%z')
data <- merge(data, checkedPoints[,c("datetime","anomaly","distLeft","distGain","dspeed","dalt","firstAlert")], by.x="datetime", by.y="datetime", all.x = TRUE, sort = TRUE, suffixes = c(".x",".y"))
}
#    print("data")
#    print(data)
#    print("checkedPoints")
#    print(checkedPoints)
# data[data$datetime %in% checkedPoints$datetime,])
#    print("data")
if (!(length(data) > 0 & length(bgEnData) > 0)) {
quit()
}
quantiles.speed <- quantile(data$speed)
if (max(data$speed) + min(data$speed) > 0) {
quantiles.speed.scaled <- quantiles.speed / (max(data$speed) - min(data$speed))
quantiles.speed.scaled[1] <- 0
} else {
quantiles.speed.scaled <- quantiles.speed
}
separationIndex <- which(tail(data$eventTimestamp,-1) > head(data$eventTimestamp,-1) + 30*60)
if (is.integer(separationIndex) & length(separationIndex) > 0) {
#        data <- data[1:separationIndex[1],]
print("Warning! Events are missing for 30 minutes in flight data at: ")
print(data[separationIndex[1],])
}
data.minlat <- min(c( data$latitude, bgEnData$origAirpoLat, bgEnData$destinAirpoLat ))
data.maxlat <- max(c( data$latitude, bgEnData$origAirpoLat, bgEnData$destinAirpoLat ))
data.minlon <- min(c( data$longitude, bgEnData$origAirpoLon, bgEnData$destinAirpoLon ))
data.maxlon <- max(c( data$longitude, bgEnData$origAirpoLon, bgEnData$destinAirpoLon ))
#    left/bottom/right/top bounding box
boundingbox <- c(data.minlon, data.minlat, data.maxlon, data.maxlat)
## To find which row has some NA in some column
# print(data[unique (unlist (lapply (data, function (x) which (is.na (x))))),])
custo_map <- get_map(location = boundingbox, zoom=DEFAULT_ZOOM, color="bw", crop = TRUE)
#    custo_map <- openmap(c(lat = data.maxlat + 5, lon = data.minlon - 5), c(lat = data.minlat - 5, lon = data.maxlon + 5), type=maptype)
#    custo_map <- openmap(c(lat = data.maxlat + 5, lon = data.minlon - 5), c(lat = data.minlat - 5, lon = data.maxlon + 5), type=maptype)
#    custo_map <- openmap(c(lat = 198, lon = -4), c(lat = -4, lon = 17), minNumTiles=9, type=maptype)
#    custo_map <- openproj(custo_map)
pdf(paste(OUT_FOLDER, "/", trackId, "-nu-map.pdf", sep=""))
#    p <- ggmap(euro_map) +
p <- ggmap(custo_map) +
geom_path(data = data, aes(x = longitude, y = latitude), size=4, colour="white", alpha=0.75) +
geom_point(data = data, aes(x = longitude, y = latitude, colour = speed)) +
geom_path(data = data, aes(x = longitude, y = latitude), linetype="dashed")
if (showdiversionairport) {
p <- p + geom_point(data = unexpectedDestination, aes(x = destinAirpoLon, y = destinAirpoLat, shape="Diversion"), size=8)
#        geom_text(data = unexpectedDestination, aes(x = destinAirpoLon, y = destinAirpoLat + 1, label=paste(destiCity, "\n", "(", destiName, ")", sep="")), hjust=0.5, vjust=0, size=3, alpha=0.85, fontface="bold") +
}
p <- p +
geom_point(data = bgEnData, aes(x = destinAirpoLon, y = destinAirpoLat, shape="Destination"), size=8) +
#        geom_text(data = bgEnData, aes(x = destinAirpoLon, y = destinAirpoLat + 0.75, label=paste(destiCity, "  (", destiName, ")", sep="")), hjust=0, vjust=0, size=3, alpha=0.85, fontface="bold") +
geom_point(data = bgEnData, aes(x = origAirpoLon, y = origAirpoLat, shape="Origin"), size=8)
#        geom_text(data = bgEnData, aes(x = origAirpoLon - 0.5, y = origAirpoLat, label=paste(oriCity,"  ", "(", oriName, ")    ", sep="")), hjust=1, vjust=0.5, size=3, alpha=0.85, fontface="bold") +
if (diversioncheck) {
p <- p +
geom_text(data = data[!is.na(data$anomaly) & (data$firstAlert == 'Alert!'),], aes(x = longitude, y = latitude, label="    Diversion detected  "), hjust=0, vjust=0.5, size=4, alpha=0.85, angle=45, fontface="bold") +
geom_point(data = data[!is.na(data$anomaly) & (data$firstAlert == 'Alert!'),], aes(x = longitude, y = latitude, size = altitude * 1.5), size=3, alpha = 0.5) +
geom_point(data = data[!is.na(data$anomaly) & (data$firstAlert == 'Alert!'),], aes(x = longitude, y = latitude, size = altitude * 1.5), size=3, shape = 1)
}
p <- p +
scale_x_continuous(limits = c(data.minlon -1, data.maxlon +1)) +
scale_y_continuous(limits = c(data.minlat -1, data.maxlat +1)) +
#        labs(list(title = paste("Flight #", trackId, sep=""), colour = "Speed [mph]", size = "Altitude [feet]", shape = "Airport", x = "Longitude [deg]", y = "Latitude [deg]")) +
# Without title
labs(list(title = element_blank(), shape = "Airport", colour = "Speed [mph]", x = "Longitude [deg]", y = "Latitude [deg]")) +
#        guides(shape = guide_legend(override.aes = list(alpha = 1.0, colour="black"))) +
scale_shape_manual(breaks = airshapetypes$types, values=airshapetypes$shapes)
if (max(data$speed) + min(data$speed) > 0) {
p <- p +
scale_colour_gradientn(limits=c(min(data$speed), max(data$speed)), values=as.double(quantiles.speed.scaled), colours = speedcolours) +
scale_fill_grey()
}
if (nolegend) {
p <- p + theme(legend.position='none')
}
print(p)
dev.off()
#}
